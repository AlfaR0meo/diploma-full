# Экологическая карта Севастополя: Объединяемся ради природы!

Добро пожаловать на экологическую карту Севастополя, предоставленную экосообществом города. Эта карта - наш важный инструмент для отслеживания и обозначения экологических объектов и инициатив в нашем городе.

Что вы найдете на экологической карте:

1. Природные заповедники и парки: Мы отмечаем на карте все природные заповедники, парки и зоны отдыха Севастополя. Здесь вы можете найти информацию о них, такую как их расположение, особенности и доступные маршруты.

2. Экологические проекты и инициативы: Мы также отмечаем на карте различные экологические проекты и инициативы, проводимые в нашем городе. Это может включать акции по уборке мусора, посадку деревьев, экологические образовательные мероприятия и многое другое.

3. Пункты сбора и переработки: На карте указаны пункты сбора и переработки различных видов отходов, таких как пластик, стекло, батарейки и другие материалы. Это поможет вам найти ближайший пункт сбора и сделать свой вклад в устойчивое использование ресурсов.

4. Экологически дружественные места: Мы также отмечаем на карте места, где вы можете найти экологически дружественные продукты и услуги. Это могут быть магазины органической еды, кафе с вегетарианским меню, магазины, продающие товары без пластика и многое другое.

Как использовать экологическую карту:

- Вы можете просматривать карту и искать интересующие вас экологические объекты и инициативы.
- Вы можете добавлять свои собственные метки на карту, чтобы поделиться с другими участниками сообщества интересными местами и инициативами.
- Вы также можете присоединиться к различным акциям и мероприятиям, организованным на основе информации на карте.

Мы призываем всех жителей Севастополя присоединиться к использованию экологической карты и вместе делать наш город более экологически чистым и устойчивым!

С уважением,
Имя вашего экосообщества



Батарейки batteries
Лампочки lightbulbs
Бумага paper
Пластик plastic
Стекло glass
Металл metal
Техника technic
Одежда clothes

Кнопка определения местоположения, чтобы на карте отображалась дислокация пользователя отдельным значком


npm i
composer i
 
npm run dev (от Vite)
npm run build (от Vite)

php artisan serve

php artisan down
php artisan up

php artisan optimize:clear
php artisan route:clear
php artisan cache:clear

php artisan storage:link
php artisan storage:unlink

php artisan make:model Test -m
php artisan make:controller TestController
php artisan make:middleware TestMiddleware

php artisan migrate
php artisan migrate:rollback --step=1
php artisan migrate:fresh
php artisan db:seed
php artisan make:migration create_flights_table

php artisan optimize
php artisan list
php artisan inspire




@if (Session::has('success'))
<div class="block">{{ Session::get('success') }}</div>
@endif

// Test::truncate(); // Удалить все записи-объекты в БД

// for ($i=0; $i < 20; $i++) { 
//     Test::create([
//         'name' => Arr::random(Test::namesArr),
//         'color' => Arr::random(Test::colorsArr),
//     ]);
// }

$records = Test::all();


<div class="error">
    <ul>
        @foreach ($errors->all() as $error)
            <li>{{ $error }}</li>
        @endforeach
    </ul>
</div>


Извлечение записей через модель из БД

Test::truncate()
Test::all()
Test::where()
Test::whereIn()
Test::find()
Test::first()
->toArray()
->toJson()
















// let map = L.map('map').setView(SEVASTOPOL_COORDS, INITIAL_ZOOM);

// L.tileLayer('https://core-renderer-tiles.maps.yandex.net/tiles?l=map&x={x}&y={y}&z={z}&scale=1&lang=ru_RU', {
//     maxZoom: 21,
//     //crs: L.CRS.EPSG3395,
//     attribution: '&copy; <a href="http://www.yandex.ru">Яндекс</a>',
// }).addTo(map);


// const locationBtn = document.querySelector('.location-btn');

// if (locationBtn) {
//     locationBtn.addEventListener('click', () => {
//         navigator.geolocation.getCurrentPosition(successLocation, errorLocation, {
//             enableHighAccuracy: true
//         });
//     });
// }

// function successLocation(userPosition) {
//     console.log(userPosition);

//     const lat = userPosition.coords.latitude;
//     const lng = userPosition.coords.longitude;

//     L.marker([lat, lng], {
//         icon: userLocationIcon,
//         alt: 'Ваше местоположение'
//     })
//         .bindPopup('Ваше местоположение')
//         .addTo(map);
// }

// function errorLocation(error) {
//     console.log(error);
// }